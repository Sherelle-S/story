thats that pain



// Variables to manage timers
let idleTimeout;
let sessionTimeout;
const logoutURL = "logout.aspx";
const sessionDuration = 9 * 60 * 60 * 1000; // 9 hours in milliseconds
const warningDuration = 30 * 60 * 1000; // 30 minutes in milliseconds
const idleTimer = 60 * 60 * 1000; // 60 minutes in milliseconds

// Retrieve the lastActivity timestamp from localStorage
let lastActivity = parseInt(localStorage.getItem('lastActivity')) || Date.now();
let sessionStarted = localStorage.getItem('sessionStarted');

// Function to reset idle timer
function resetIdleTimer() {
    clearTimeout(idleTimeout);
    idleTimeout = setTimeout(function() {
        console.log("Logging out due to inactivity.");
        window.location.href = logoutURL;
    }, idleTimer);
}

// Function to start session timer
function startSessionTimer() {
    const elapsed = Date.now() - lastActivity;
    const adjustedSessionDuration = sessionDuration - elapsed;

    sessionTimeout = setTimeout(function() {
        console.log("Logging out due to inactivity.");
        window.location.href = logoutURL;
    }, adjustedSessionDuration);

    setTimeout(function() {
        alert("Your session will expire in 30 minutes. Please save your work.");
    }, adjustedSessionDuration - warningDuration);
}

// Track activity events
document.body.addEventListener("mousemove", function() {
    clearTimeout(idleTimeout);
    lastActivity = Date.now();
    localStorage.setItem('lastActivity', lastActivity); // Save to localStorage
    resetIdleTimer();
});
document.body.addEventListener("keydown", function() {
    clearTimeout(idleTimeout);
    lastActivity = Date.now();
    localStorage.setItem('lastActivity', lastActivity); // Save to localStorage
    resetIdleTimer();
});

// Log remaining time until logout every minute
function logRemainingTime() {
    setInterval(function() {
        const now = Date.now();
        const elapsed = now - lastActivity;
        const idleTimeRemaining = idleTimer - elapsed;
        const sessionRemaining = sessionDuration - elapsed;

        console.log("Minutes until inactivity logout: " + Math.floor(idleTimeRemaining / 60000));
        console.log("Minutes until session logout: " + Math.floor(sessionRemaining / 60000));
    }, 60000); // Log every minute
}

// Clear localStorage on logout
function logout() {
    localStorage.clear();
    window.location.href = logoutURL;
}

// Check if the page was refreshed
if (window.performance.navigation.type === 1) {
    // Page was refreshed
    console.log("Page was refreshed. Resuming timers...");
    if (!sessionStarted) {
        // If session not started, treat as a fresh session
        lastActivity = Date.now();
        localStorage.setItem('lastActivity', lastActivity);
        localStorage.setItem('sessionStarted', 'true');
    } else {
        // If session already started, use existing lastActivity
        lastActivity = parseInt(localStorage.getItem('lastActivity')) || Date.now();
    }
} else {
    // Initial load
    lastActivity = Date.now();
    localStorage.setItem('lastActivity', lastActivity);
    localStorage.setItem('sessionStarted', 'true');
}

// Start the script
startSessionTimer();
resetIdleTimer();
logRemainingTime();
